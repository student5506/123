
import requests
import xml.etree.ElementTree as ET
import asyncio
from datetime import datetime
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, CallbackContext
import os

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = '7184238540:AAHCW50sy8BouE3erbX2yNj3d-nKYBPydmE'
# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ ID —á–∞—Ç–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
CHAT_ID = '1047092792'
# URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
URL = 'https://ubilling.net.ua/aerialalerts/?xml=true'
# –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º
ALERT_VIDEO_PATH = '1.mp4'
ALL_CLEAR_VIDEO_PATH = '2.mp4'

def parse_alertnow(xml_data):
    try:
        root = ET.fromstring(xml_data)
        state23_elements = root.findall('.//state23')
        for state in state23_elements:
            alertnow = state.find('alertnow').text
            if alertnow is not None:
                return alertnow == 'true'
    except ET.ParseError:
        return False
    return False

def get_current_time():
    return datetime.now().strftime('%H:%M:%S')

def file_exists(file_path):
    return os.path.isfile(file_path)

async def fetch_data_with_retries(url, retries=3, timeout=10):
    for attempt in range(retries):
        try:
            response = requests.get(url, timeout=timeout)
            response.raise_for_status()
            return response.text
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < retries - 1:
                await asyncio.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                raise

async def check_alert(context: CallbackContext):
    try:
        xml_data = await fetch_data_with_retries(URL)
        alert_now = parse_alertnow(xml_data)
        
        if 'last_alert' not in context.chat_data:
            context.chat_data['last_alert'] = False
        
        current_alert = context.chat_data['last_alert']

        if alert_now and not current_alert:
            current_time = get_current_time()
            await context.bot.send_message(chat_id=CHAT_ID, text=f"üî¥ {current_time} –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!")
            if file_exists(ALERT_VIDEO_PATH):
                with open(ALERT_VIDEO_PATH, 'rb') as f:
                    await context.bot.send_video(chat_id=CHAT_ID, video=InputFile(f, filename='1.mp4'))
            else:
                await context.bot.send_message(chat_id=CHAT_ID, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Ç—Ä–µ–≤–æ–≥–∏.")
            context.chat_data['last_alert'] = True
        elif not alert_now and current_alert:
            current_time = get_current_time()
            await context.bot.send_message(chat_id=CHAT_ID, text=f"üü¢ {current_time} –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ –≤ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!")
            if file_exists(ALL_CLEAR_VIDEO_PATH):
                with open(ALL_CLEAR_VIDEO_PATH, 'rb') as f:
                    await context.bot.send_video(chat_id=CHAT_ID, video=InputFile(f, filename='2.mp4'))
            else:
                await context.bot.send_message(chat_id=CHAT_ID, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –æ—Ç–±–æ–π.")
            context.chat_data['last_alert'] = False

        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        print(f"Current alert: {alert_now}, Last alert: {current_alert}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–≤–æ–≥–∏: {e}")

async def send_current_status(update: Update, context: CallbackContext):
    try:
        xml_data = await fetch_data_with_retries(URL)
        alert_now = parse_alertnow(xml_data)
        current_time = get_current_time()
        if alert_now:
            await update.message.reply_text(f"üî¥ {current_time} –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!")
            if file_exists(ALERT_VIDEO_PATH):
                with open(ALERT_VIDEO_PATH, 'rb') as f:
                    await update.message.reply_video(video=InputFile(f, filename='1.mp4'))
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Ç—Ä–µ–≤–æ–≥–∏.")
        else:
            await update.message.reply_text(f"üü¢ {current_time} –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ –≤ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!")
            if file_exists(ALL_CLEAR_VIDEO_PATH):
                with open(ALL_CLEAR_VIDEO_PATH, 'rb') as f:
                    await update.message.reply_video(video=InputFile(f, filename='2.mp4'))
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –æ—Ç–±–æ–π.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–≤–æ–≥–∏.")

async def start(update: Update, context: CallbackContext):
    await send_current_status(update, context)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–µ–≤–æ–≥–∏ —á–µ—Ä–µ–∑ asyncio
    context.application.create_task(periodic_check(context))

async def periodic_check(context: CallbackContext):
    while True:
        await check_alert(context)
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler('start', start))

    application.run_polling()

if __name__ == '__main__':
    main()
